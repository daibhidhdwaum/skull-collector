{"version":3,"sources":["components/skullsList/skullsList.module.css","components/rules/Rules.module.css","components/winsAndLosses/winsAndLosses.module.css","button.module.css","components/header/header.module.css","components/targetNumber/targetNumber.module.css","components/currentTotal/currentTotal.module.css","scoreboard.module.css","components/header/Header.js","components/skullsList/SkullsList.js","components/targetNumber/TargetNumber.js","components/currentTotal/CurrentTotal.js","components/winsAndLosses/WinsAndLosses.js","components/rules/Rules.js","App.js","index.js"],"names":["module","exports","Header","className","styles","header","title","SkullsList","skulls","setCurrentTotal","skullList","map","skull","skullButton","onClick","e","assignedNumber","src","process","alt","skullImage","id","TargetNumber","target","container","paragraph","CurrentTotal","total","WinsAndLosses","wins","losses","Rules","rules","App","state","currentTotal","skullsResetState","currentTarget","Math","floor","random","this","setState","newSkullsArray","setTarget","setAssignedNumbers","curr","newTotal","prevState","newWins","newLosses","buttonstyles","setNumbers","button","scoreboard","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db4ec98a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"skulls\":\"skullsList_skulls__26KFo\",\"skull\":\"skullsList_skull__34rgN\",\"skullButton\":\"skullsList_skullButton__PSYcu\",\"skullImage\":\"skullsList_skullImage__2IDen\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rules\":\"Rules_rules__2C-QS\",\"paragraph\":\"Rules_paragraph__1JW9V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"winsAndLosses_container__OgDCZ\",\"paragraph\":\"winsAndLosses_paragraph__glwBL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"button_container__3NfVx\",\"button\":\"button_button__2i1AQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__22ac4\",\"title\":\"header_title__2CCxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"targetNumber_container__J1H9o\",\"paragraph\":\"targetNumber_paragraph__2s3um\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"currentTotal_container__2Ofcl\",\"paragraph\":\"currentTotal_paragraph__1bsXZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard\":\"scoreboard_scoreboard__4u7u_\"};","import styles from \"./header.module.css\";\n\nconst Header = () => {\n  return (\n    <header className={styles.header}>\n      <h1 className={styles.title}>Crystal Skull Collector</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import styles from \"./skullsList.module.css\";\n\nconst SkullsList = ({ skulls, setCurrentTotal }) => {\n  const skullList = skulls.map((skull) => {\n    return (\n      <li key={skull.id} className={styles.skull}>\n        <button\n          className={styles.skullButton}\n          onClick={(e) => setCurrentTotal(e, skull.assignedNumber)}\n        >\n          <img\n            src={process.env.PUBLIC_URL + skull.src}\n            alt=\"skull\"\n            className={styles.skullImage}\n          />\n        </button>\n      </li>\n    );\n  });\n  return <ul className={styles.skulls}>{skullList}</ul>;\n};\n\nexport default SkullsList;\n","import styles from \"./targetNumber.module.css\";\n\nconst TargetNumber = ({ target }) => {\n  return (\n    <div className={styles.container}>\n      <p className={styles.paragraph}>Target: {target}</p>\n    </div>\n  );\n};\n\nexport default TargetNumber;\n","import styles from \"./currentTotal.module.css\";\n\nconst CurrentTotal = ({ total }) => {\n  return (\n    <div className={styles.container}>\n      <p className={styles.paragraph}>Current: {total}</p>\n    </div>\n  );\n};\n\nexport default CurrentTotal;\n","import styles from \"./winsAndLosses.module.css\";\n\nconst WinsAndLosses = ({ wins, losses }) => {\n  return (\n    <div className={styles.container}>\n      <p className={styles.paragraph}>Wins: {wins}</p>\n      <p className={styles.paragraph}>Losses: {losses}</p>\n    </div>\n  );\n};\n\nexport default WinsAndLosses;\n","import styles from \"./Rules.module.css\";\n\nconst Rules = () => {\n  return (\n    <section className={styles.rules}>\n      <p className={styles.paragraph}>\n        You will be given a random target number at the beginning of the game.\n      </p>\n      <p className={styles.paragraph}>\n        Each skull holds a point value that will be revealed to you upon\n        clicking and then added to your point score. These points will change\n        when you start a new game.\n      </p>\n      <p className={styles.paragraph}>\n        To win the game match the random number. If your score goes above the\n        random number you lose the game.\n      </p>\n    </section>\n  );\n};\n\nexport default Rules;\n","import React, { Component } from \"react\";\n\n// css\nimport \"./normalize.css\";\nimport \"./App.css\";\nimport styles from \"./scoreboard.module.css\";\nimport buttonstyles from \"./button.module.css\";\n\n// components\nimport Header from \"./components/header/Header\";\nimport SkullsList from \"./components/skullsList/SkullsList\";\nimport TargetNumber from \"./components/targetNumber/TargetNumber\";\nimport CurrentTotal from \"./components/currentTotal/CurrentTotal\";\nimport WinsAndLosses from \"./components/winsAndLosses/WinsAndLosses\";\nimport Rules from \"./components/rules/Rules\";\n\nclass App extends Component {\n  // define initial state\n  state = {\n    skulls: [\n      { id: 1, assignedNumber: 0, src: \"/assets/white-skull.png\" },\n      { id: 2, assignedNumber: 0, src: \"/assets/green-skull.png\" },\n      { id: 3, assignedNumber: 0, src: \"/assets/red-skull.png\" },\n      { id: 4, assignedNumber: 0, src: \"/assets/black-skull.png\" },\n    ],\n    target: 0,\n    currentTotal: 0,\n    wins: 0,\n    losses: 0,\n  };\n\n  skullsResetState = [...this.state.skulls];\n\n  // set the target number\n  setTarget() {\n    const currentTarget = Math.floor(Math.random() * 101) + 19;\n    this.setState({ target: currentTarget });\n  }\n  // assign random number to each skull\n  setAssignedNumbers() {\n    const newSkullsArray = this.state.skulls.map((skull) => {\n      const currentTarget = Math.floor(Math.random() * 11) + 1;\n\n      const copyOfSkulls = { ...skull, assignedNumber: currentTarget };\n\n      return copyOfSkulls;\n    });\n    this.setState({ skulls: newSkullsArray });\n  }\n\n  // runs number assignment functions\n  setNumbers() {\n    /**\n     * todo Hide play button after click\n     * todo Display again whe game is complete\n     *  */\n\n    this.setTarget();\n    this.setAssignedNumbers();\n  }\n\n  // when player clicks on skull\n  // update the players current total for this game\n  setCurrentTotal(e, curr) {\n    const newTotal = this.state.currentTotal + curr;\n\n    this.setState({ currentTotal: newTotal });\n  }\n\n  // check if the players current total is equal or greater than the target number\n  componentDidUpdate(prevState) {\n    // if current total is lower than the target, continue with the game\n    if (this.state.target === 0) {\n      return;\n    } else if (prevState.currentTotal !== this.state.currentTotal) {\n      const curr = this.state.currentTotal;\n      const target = this.state.target;\n      let newWins = this.state.wins;\n      let newLosses = this.state.losses;\n\n      // if the current total is equal\n      if (curr === target) {\n        // increase wins\n        newWins++;\n        // reset the game\n        this.setState({\n          skulls: this.skullsResetState,\n          target: 0,\n          currentTotal: 0,\n          wins: newWins,\n        });\n      }\n      // if the current total is greater\n      else if (curr > target) {\n        // increase losses\n        newLosses++;\n        // reset the game\n        this.setState({\n          skulls: this.skullsResetState,\n          target: 0,\n          currentTotal: 0,\n          losses: newLosses,\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"wrapper\">\n          <section>\n            <SkullsList\n              skulls={this.state.skulls}\n              setCurrentTotal={(e, curr) => this.setCurrentTotal(e, curr)}\n            />\n          </section>\n          <section className={buttonstyles.container}>\n            <button\n              onClick={() => this.setNumbers()}\n              className={buttonstyles.button}\n            >\n              Play\n            </button>\n          </section>\n          <section className={styles.scoreboard}>\n            <TargetNumber target={this.state.target} />\n            <CurrentTotal total={this.state.currentTotal} />\n            <WinsAndLosses wins={this.state.wins} losses={this.state.losses} />\n          </section>\n\n          <Rules />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}